#pragma checksum "C:\Users\Athula\source\repos\PracticalTest\PracticalTest\Views\Mark\AddMarks.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c50a1f51f9af542be590e9100d7910935739a9b8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Mark_AddMarks), @"mvc.1.0.view", @"/Views/Mark/AddMarks.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c50a1f51f9af542be590e9100d7910935739a9b8", @"/Views/Mark/AddMarks.cshtml")]
    public class Views_Mark_AddMarks : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\Athula\source\repos\PracticalTest\PracticalTest\Views\Mark\AddMarks.cshtml"
  
    Layout = "_Layout";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""row"" id=""app"">
    <div class=""col-md-8"">
        <table id=""example"" class=""display"" style=""width:100%"">
            <thead>
                <tr>
                    <th>School</th>
                    <th>Address</th>
                    <th>Student</th>
                    <th>Dob</th>
                    <th>Grade</th>
                    <th>Subject</th>
                    <th>Marks</th>
                    <th>Teacher</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <div class=""col-md-4"">
        <h1>Add Marks</h1>
        <form>
            <div class=""form-group"">
                <label for=""formGroupExampleInput"">Grade</label>
                <select v-on:change=""GetStudents()"" v-model=""markInputModel.gradeId"" class=""form-control"">
                    <option disabled");
            BeginWriteAttribute("value", " value=\"", 919, "\"", 927, 0);
            EndWriteAttribute();
            WriteLiteral(@">Please select</option>
                    <option v-for=""grade in grades"" v-bind:value=""grade.id"">{{grade.name}}</option>
                </select>
            </div>
            <div class=""form-group"">
                <label for=""formGroupExampleInput2"">Student</label>
                <select v-model=""markInputModel.studentId"" class=""form-control"">
                    <option disabled");
            BeginWriteAttribute("value", " value=\"", 1326, "\"", 1334, 0);
            EndWriteAttribute();
            WriteLiteral(@">Please select</option>
                    <option v-for=""student in students"" v-bind:value=""student.id"">{{student.name}}</option>
                </select>
            </div>
            <div class=""form-group"">
                <label for=""formGroupExampleInput2"">Subject</label>
                <select v-on:change=""GetTeachersBySubject()"" v-model=""markInputModel.subjectId"" class=""form-control"">
                    <option disabled");
            BeginWriteAttribute("value", " value=\"", 1778, "\"", 1786, 0);
            EndWriteAttribute();
            WriteLiteral(@">Please select</option>
                    <option v-for=""subject in subjects"" v-bind:value=""subject.id"">{{subject.name}}</option>
                </select>
            </div>
            <div class=""form-group"">
                <label for=""formGroupExampleInput2"">Teach By</label>
                <select v-model=""markInputModel.teacherId"" class=""form-control"">
                    <option disabled");
            BeginWriteAttribute("value", " value=\"", 2194, "\"", 2202, 0);
            EndWriteAttribute();
            WriteLiteral(@">Please select</option>
                    <option v-for=""teacher in teachers"" v-bind:value=""teacher.id"">{{teacher.name}}</option>
                </select>
            </div>
            <div class=""form-group"">
                <label for=""formGroupExampleInput2"">Marks</label>
                <input v-model=""markInputModel.marks"" type=""number"" class=""form-control"" id=""formGroupExampleInput2"" placeholder=""Another input"">
            </div>
            <br />
            <div class=""form-group"">
                <button v-on:click=""Save"" type=""button"" class=""btn btn-primary"">Save</button>
                <button v-on:click=""ResetInput"" type=""button"" class=""btn btn-danger"">Clear</button>
            </div>
        </form>
    </div>
</div>


");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"


    <script>       
        $(document).ready(function () {
           
        });
       
        var vueApp = new Vue({
            el: '#app',
            data: {               
                markInputModel: {
                    gradeId: 0,
                    studentId: 0,
                    subjectId: 0,
                    teacherId: 0,
                    marks: 0,
                    teacherSubjectId: 0,
                },
                grades: [],
                students: [],
                subjects: [],
                teachers: [],
                alldata: [],
            },
            mounted: function (event) {
                this.GetAll();
                this.GetAllGrade();               
                this.GetSubjects();
            },
            methods: {
                ResetInput() {
                    this.markInputModel.gradeId = 0;
                    this.markInputModel.studentId = 0;
                    this.markInputModel.subjectId ");
                WriteLiteral(@"= 0;
                    this.markInputModel.teacherId = 0;
                    this.markInputModel.marks = 0;
                    this.markInputModel.teacherSubjectId = 0;
                },

                GetTeachersBySubject: function () {
                    this.teacherSubjectId = 

                    axios.get('/Subject/GetTeachBySubjectId', {
                        params: { subjectId: this.markInputModel.subjectId }
                    })
                        .then((response) => {
                            this.teachers = response;
                        });
                },

                GetSubjects: function () {
                    axios.get('/Subject/GetAll')
                        .then((response) => {
                            this.subjects = response;
                        });
                },

                GetStudents: function () {
                    axios.get('/Student/GetByGrade', {
                        params: { gradeId: this.markInput");
                WriteLiteral(@"Model.gradeId }
                    })
                        .then((response) => {
                            this.students = response;
                        });
                },


                GetAllGrade: function () {
                    axios.get('/Grade/GetAll')
                        .then((response) => {
                            this.grades = response;                                                 
                        });
                },        
              
                GetAll: function () {
                    axios.get('/Mark/GetMarks')
                        .then((response) => {                           
                            var data = [];
                            $.each(response, function (index, value) {
                                var obj = {
                                    ""school"": value.student.school.name,
                                    ""address"": value.student.school.address,
                                    ""st");
                WriteLiteral(@"udent"": value.student.name,
                                    ""dob"": value.student.dob,
                                    ""grade"": value.student.grade.name,
                                    ""subject"": value.teacherSubject.subject.name,
                                    ""marks"": value.marks,
                                    ""teacher"": value.teacherSubject.teacher.name
                                };
                                data.push(obj);
                            });

                            $('#example').dataTable().fnClearTable();
                            $('#example').dataTable().fnDestroy();
                            $('#example').DataTable({
                                    data: data,
                                    columns: [
                                        { ""data"": ""school"" },
                                        { ""data"": ""address"" },
                                        { ""data"": ""student"" },
                                  ");
                WriteLiteral(@"      { ""data"": ""dob"" },
                                        { ""data"": ""grade"" },
                                        { ""data"": ""subject"" },
                                        { ""data"": ""marks"" },
                                        { ""data"": ""teacher"" },
                                    ],
                                    pageLength: 6,
                                    lengthMenu: [[6, 12, -1], [6, 12, 'All']]
                                });                         
                        });               
                },
                             

                Save: function () {
                    const mark = this.markInputModel;
                    axios.post(""/Mark/SaveMarks"", mark)
                        .then(response => {
                            this.GetAll();
                            this.ResetInput();
                        });
                },
            }
        })
    </script>

");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
